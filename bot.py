import asyncio
import logging
import os
import sys
os.environ['PYTORCH_CUDA_ALLOC_CONF'] = 'expandable_segments:True'
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, html
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.types import Message

from parser_async import WildberriesParser
from analyzer_async import Analyzer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    filename="bot.log",
    filemode="a",
    encoding="utf-8"
)
logger = logging.getLogger(__name__)

# –£–±–∏—Ä–∞–µ–º –í–°–ï –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
logger.handlers.clear()

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¢–û–õ–¨–ö–û –¥–ª—è —Ñ–∞–π–ª–∞
file_handler = logging.FileHandler("bot.log", encoding="utf-8", mode="a")
file_handler.setFormatter(logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s"))
logger.addHandler(file_handler)

# –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)
console_formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")
console_handler.setFormatter(console_formatter)
logger.addHandler(console_handler)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("BOT_TOKEN")

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
dp = Dispatcher()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    """
    user_info = f"{message.from_user.full_name} (id: {message.from_user.id})"
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_info} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
    
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {html.bold(message.from_user.full_name)}!\n\n"
        "–Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–∑—ã–≤–æ–≤ —Å Wildberries.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä –∏–ª–∏ –∞—Ä—Ç–∏–∫—É–ª, –∏ —è —Å–æ–±–µ—Ä—É –æ—Ç–∑—ã–≤—ã, "
        "–ø—Ä–æ–≤–µ–¥—É —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç-–∞–Ω–∞–ª–∏–∑ –∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é.\n\n"
        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /help."
    )
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_info}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message(Command("help"))
async def help_command_handler(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
    """
    user_info = f"{message.from_user.full_name} (id: {message.from_user.id})"
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_info} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø—Ä–∞–≤–∫—É –∫–æ–º–∞–Ω–¥–æ–π /help")
    
    await message.answer(
        "‚ÑπÔ∏è –ü–æ–º–æ—â—å:\n\n"
        "1. –ù–∞–π–¥–∏ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ –Ω–∞ Wildberries\n"
        "2. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∞—Ä—Ç–∏–∫—É–ª –∏–ª–∏ —Å—Å—ã–ª–∫—É\n"
        "3. –Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –æ—Ç–∑—ã–≤—ã –∏ –ø–æ–∫–∞–∂—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n\n"
        "–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:\n"
        "- –°–±–æ—Ä –∏ –∞–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è\n"
        "- –Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞, –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ—Ç–¥–µ–ª—å–Ω–æ\n"
        "- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∫–ª—é—á–∞—é—Ç —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –æ—Ç–∑—ã–≤–æ–≤ –∏ –∏—Ö —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é"
    )
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_info}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def process_message(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    text = message.text
    user_info = f"{message.from_user.full_name} (id: {message.from_user.id})"
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_info}: {text}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Å—ã–ª–∫—É –∏–ª–∏ –∞—Ä—Ç–∏–∫—É–ª
    if "wildberries.ru" in text or text.isdigit():
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞/—Å—Å—ã–ª–∫–∏: {text}")

        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–∞–±–æ—Ç—ã
        status_start = await message.answer('üîç –ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä –∏ –∞–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...')

        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –ø–∞—Ä—Å–µ—Ä–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
            parser = WildberriesParser()
            analyzer = Analyzer()

            # –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞
            logger.info(f"–ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è: {text}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
            status_parse = await message.answer('üí° –ó–∞–ø—É—Å–∫–∞—é –ø–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∑—ã–≤–æ–≤...')
            
            reviews = await parser.parse(text)

            if not reviews:
                logger.warning(f"–û—Ç–∑—ã–≤—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–ª—è: {text}")
                
                # –£–¥–∞–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                for msg in [status_start, status_parse]:
                    await bot.delete_message(message.chat.id, msg.message_id)
                
                await message.answer('‚ö†Ô∏è –û—Ç–∑—ã–≤–æ–≤ –ø–æ —Ç–æ–≤–∞—Ä—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ.')
                return

            logger.info(f"–ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è: {text}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
            status_analyze = await message.answer('‚öñÔ∏è –ü—Ä–∏—Å—Ç—É–ø–∞—é –∫ –∞–Ω–∞–ª–∏–∑—É –æ—Ç–∑—ã–≤–æ–≤...')

            # –ê–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤
            logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è: {text}")
            csv_path, analyzed_data = await analyzer.analyze_reviews_data_async(reviews)
            logger.info(f"–ê–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {csv_path}")

            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            for msg in [status_start, status_parse, status_analyze]:
                await bot.delete_message(message.chat.id, msg.message_id)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            product_name = reviews.get('product_name', f'–ê—Ä—Ç–∏–∫—É–ª {reviews["article_id"]}')
            overall_sentiment = await _calculate_overall_sentiment(analyzed_data)
            summary = await _format_summary(analyzed_data)
            avg_rating = reviews.get('avg_rating', None)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º
            if avg_rating is not None:
                rating_str = f"<b>{avg_rating:.1f}</b>"  # –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —á–∏—Å–ª–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
            else:
                rating_str = "<i>–Ω–µ —É–∫–∞–∑–∞–Ω</i>"  # –ö—É—Ä—Å–∏–≤ –¥–ª—è —Å–ª—É—á–∞—è "–Ω–µ —É–∫–∞–∑–∞–Ω"

                        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            response_text = (
                "‚úÖ‚úÖ‚úÖ –û–±–∑–æ—Ä –Ω–∞ —Ç–æ–≤–∞—Ä –≥–æ—Ç–æ–≤! ‚úÖ‚úÖ‚úÖ\n\n"
                f"<b>{product_name}</b>\n"
                f"–†–µ–π—Ç–∏–Ω–≥: {rating_str}\n\n"
                f"<b>–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞:</b> {overall_sentiment}\n"
                f"{summary}"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_info}")
            await message.answer(response_text, parse_mode=ParseMode.HTML)
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_info}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_info}: {e}", exc_info=True)

            # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏
            for msg in [status_start, getattr(status_parse, 'message_id', None), getattr(status_analyze, 'message_id', None)]:
                if msg:
                    try:
                        await bot.delete_message(message.chat.id, msg.message_id if hasattr(msg, 'message_id') else msg)
                    except Exception:
                        pass

            await message.answer(f'‚õî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}')
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_info}")
    else:
        logger.warning(f"–ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_info}: {text}")
        await message.answer(
            '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä Wildberries –∏–ª–∏ –∞—Ä—Ç–∏–∫—É–ª.\n'
            '–ù–∞–ø—Ä–∏–º–µ—Ä: https://www.wildberries.ru/catalog/12345678/detail.aspx    –∏–ª–∏ 12345678'
        )
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_info}")

async def _calculate_overall_sentiment(analyzed_data):
    """
    –†–∞—Å—á–µ—Ç –æ–±—â–µ–π —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–∑—ã–≤–æ–≤
    
    Args:
        analyzed_data (list): –°–ø–∏—Å–æ–∫ —Å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        
    Returns:
        str: –û–±—â–∞—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    """
    if not analyzed_data:
        return "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è"
    
    sentiment_counts = {
        "–∫—Ä–∞–π–Ω–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è": 0,
        "–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è": 0,
        "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è": 0,
        "–Ω–µ–≥–∞—Ç–∏–≤–Ω–∞—è": 0,
        "–∫—Ä–∞–π–Ω–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è": 0
    }
    
    for item in analyzed_data:
        sentiment = item["sentiment"]
        sentiment_counts[sentiment] += 1
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–æ–±–ª–∞–¥–∞—é—â—É—é —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    return max(sentiment_counts, key=sentiment_counts.get)

async def _format_summary(analyzed_data):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–æ–≤
    
    Args:
        analyzed_data (list): –°–ø–∏—Å–æ–∫ —Å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è
    """
    result = "\n\nüìùüìùüìù –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è üìùüìùüìù\n"
    
    # –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —ç–º–æ–¥–∂–∏
    category_emojis = {
        "–î–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞": "üî∫",
        "–ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏": "üîª",
        "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π": "üí¨"
    }

    for item in analyzed_data:
        category = item["category"]
        summary = item["summary"]
        
        if summary and summary not in ["–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ."]:
            emoji = category_emojis.get(category, "")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –Ω–∞—á–∞–ª–µ —Ç–µ–∫—Å—Ç–∞
            if category == "–î–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞" and summary.startswith("–î–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞:"):
                summary = summary.replace("–î–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞:", "", 1).strip()
            elif category == "–ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏" and summary.startswith("–ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏:"):
                summary = summary.replace("–ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏:", "", 1).strip()
            
            result += f"\n<b>{emoji}{category}:</b> {summary}\n"
    
    return result

async def main() -> None:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    """
    global bot 

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞
    if not TOKEN:
        logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª .env —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é BOT_TOKEN.")
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
    os.makedirs("data", exist_ok=True)
    logger.info("–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –¥–∞–Ω–Ω—ã—Ö")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    bot = Bot(
        token=TOKEN, 
        default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )
    logger.info("–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    try:
        print("\n" + "="*40)
        print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã...")
        print("="*40 + "\n")
        logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã...")
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        print("\n" + "="*40)
        print("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é")
        print("="*40 + "\n")
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        logger.info("–°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞")
        await bot.session.close()

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    asyncio.run(main())
